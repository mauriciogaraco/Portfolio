---
// src/components/Badge.astro
interface Props {
  variant?: "primary" | "success" | "warning" | "neutral" | "outline";
  size?: "sm" | "md";
  href?: string;
  dot?: boolean;
  class?: string;
  id?: string;
}
const {
  variant = "primary",
  size = "sm",
  href,
  dot = false,
  class: cls = "",
  id,
} = Astro.props;

const variants: Record<string, string> = {
  primary: "text-blue-200 ring-blue-400/20 bg-blue-500/10 hover:bg-blue-500/15",
  success:
    "text-emerald-200 ring-emerald-400/20 bg-emerald-500/10 hover:bg-emerald-500/15",
  warning:
    "text-amber-200 ring-amber-400/20 bg-amber-500/10 hover:bg-amber-500/15",
  neutral: "text-white/85 ring-white/15 bg-white/5 hover:bg-white/10",
  outline: "text-white/90 ring-white/25 bg-transparent hover:bg-white/5",
};

const sizes: Record<string, string> = {
  sm: "px-2 py-0.5 text-[11px] leading-5",
  md: "px-2.5 py-1 text-xs",
};

const base =
  "inline-flex items-center gap-1 rounded-full font-medium ring-1 transition-colors " +
  "focus:outline-none focus-visible:ring-2 " +
  "tracking-normal whitespace-nowrap leading-[1.2]"; // ← RESET AQUÍ

const Tag: any = href ? "a" : "span";
---

<Tag
  id={id}
  href={href}
  class={`${base} ${sizes[size]} ${variants[variant]} ${cls}`}
>
  {
    dot && (
      <span
        aria-hidden="true"
        class="inline-block size-1.5 rounded-full bg-current shadow-[0_0_0_2px_rgba(255,255,255,0.15)] animate-pulse"
      />
    )
  }
  <slot />
</Tag>
