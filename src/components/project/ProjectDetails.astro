---
import { imagesByKey } from "../../data/projectImages";
import type { ProjectItem } from "../../data/projects";
import { projects } from "../../data/projects"; // para prev/next (opcional)
import Carousel3D from "../Carousel3D";

interface Props {
  project: ProjectItem;
}
const { project } = Astro.props as Props;

const gallery = imagesByKey[project.key] ?? [];

const coverMode: "logo" | "banner" = (project as any).coverMode ?? "banner";

// alturas fluidas por modo (más pequeño para logos)
const coverClass =
  coverMode === "logo"
    ? "h-[clamp(110px,20vw,160px)] p-6" // compacta
    : "h-[clamp(180px,36vw,320px)]"; // banner moderado

const fitClass = coverMode === "logo" ? "object-contain" : "object-cover";
// Prev/Next (opcional)
const idx = projects.findIndex((p) => p.key === project.key);
const prev = idx > 0 ? projects[idx - 1] : null;
const next = idx >= 0 && idx < projects.length - 1 ? projects[idx + 1] : null;
---

<section class="mx-auto max-w-4xl px-4 py-10 md:py-16">
  <!-- breadcrumb -->
  <nav class="text-sm opacity-80">
    <a href="/#projects" class="hover:opacity-100">← Back to projects</a>
  </nav>

  <!-- header -->
  <header class="mt-4">
    <h1 class="text-3xl md:text-4xl font-bold tracking-tight">
      {project.title}
    </h1>
    {
      project.description && (
        <p class="mt-2 text-base md:text-lg opacity-85">
          {project.description}
        </p>
      )
    }

    <!-- tags -->
    <div class="mt-3 flex flex-wrap gap-2">
      {
        project.tags.map((t) => (
          <span class="inline-flex items-center gap-1 rounded-full bg-white/5 border border-white/10 px-2.5 py-1 text-xs">
            <t.icon class="size-3.5 opacity-80" />
            {t.name}
          </span>
        ))
      }
    </div>

    <!-- cover -->
    <div
      class={`mt-6 w-full overflow-hidden rounded-2xl border border-white/10 bg-white/5`}
    >
      <figure class={`relative flex items-center justify-center ${coverClass}`}>
        <img
          src={project.image}
          alt={`${project.title} cover`}
          class={`max-h-full max-w-full w-full h-full ${fitClass}`}
          loading="eager"
          decoding="async"
          sizes="(min-width: 768px) 768px, 100vw"
        />
      </figure>
    </div>

    <!-- actions -->
    {
      (project.link || project.repo) && (
        <div class="mt-4 flex flex-wrap items-center gap-3">
          {project.link && (
            <a
              href={project.link}
              target="_blank"
              rel="noopener"
              class="inline-flex items-center gap-2 rounded-lg bg-white/10 px-3 py-1.5 text-sm ring-1 ring-white/15 hover:bg-white/15"
            >
              {project.TypeProductions === "Live" ? "Live" : "Repo"} ↗
            </a>
          )}
          {project.repo && (
            <a
              href={project.repo}
              target="_blank"
              rel="noopener"
              class="inline-flex items-center gap-2 rounded-lg bg-white/5 px-3 py-1.5 text-sm ring-1 ring-white/10 hover:bg-white/10"
            >
              Repo ↗
            </a>
          )}
        </div>
      )
    }
  </header>

  <!-- long description -->
  {
    project.longDescription && (
      <article class="prose prose-invert max-w-none mt-8">
        <p set:html={project.longDescription.replace(/\n/g, "<br/>")} />
      </article>
    )
  }

  <!-- gallery -->
  {
    gallery.length > 0 && (
      <section class="mt-10">
        <h2 class="mb-3 text-xl font-semibold">Gallery</h2>
        <Carousel3D
          client:idle
          images={gallery}
          isAnApp={project.isAnApp}
          frame={project.isAnApp ? "phone" : "browser"}
          isLargeMobile={project.isLargeMobile}
          backfillMode={project.isAnApp ? "dominant-color" : "blur-image"}
          fit="contain"
          cardHeight={420}
        />
      </section>
    )
  }

  <!-- prev / next -->
  {
    (prev || next) && (
      <nav class="mt-12 flex items-center justify-between text-sm">
        <div>
          {prev && (
            <a
              href={`/projects/${prev.key}`}
              class="opacity-85 hover:opacity-100"
            >
              ← {prev.title}
            </a>
          )}
        </div>
        <div>
          {next && (
            <a
              href={`/projects/${next.key}`}
              class="opacity-85 hover:opacity-100"
            >
              {next.title} →
            </a>
          )}
        </div>
      </nav>
    )
  }

  <!-- contact CTA -->
  <div class="mt-12 flex justify-center">
    <a
      href="/#contact"
      class="rounded-full bg-white/10 px-4 py-2 text-sm ring-1 ring-white/15 hover:bg-white/15"
    >
      Contact me
    </a>
  </div>
</section>
