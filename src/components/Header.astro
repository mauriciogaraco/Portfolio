---
import localImage from "../assests/profile.jpg";
import { Theme } from "./Theme";
---

<!-- salto para accesibilidad -->
<a
  href=`${import.meta.env.BASE_URL}/#projects`
  class="sr-only focus:not-sr-only focus:absolute focus:top-2 focus:left-2 bg-yellow-400/90 text-black px-3 py-1 rounded"
>
  Skip to projects
</a>

<header
  class="sticky top-0 z-50 w-full border-b border-white/10 bg-black/25 backdrop-blur-md"
>
  <div
    class="mx-auto max-w-[1120px] px-4 py-3 flex items-center justify-between"
  >
    <!-- Logo/Avatar -->
    <a href=`${import.meta.env.BASE_URL}/` class="flex items-center gap-3">
      <div class="w-9 h-9 rounded-full overflow-hidden ring-1 ring-white/20">
        <img
          src={localImage.src}
          alt="Mauricio avatar"
          class="w-full h-full object-cover"
        />
      </div>
      <span class="hidden sm:block font-semibold tracking-tight">Mauricio</span>
    </a>

    <!-- Botón mobile -->
    <button
      id="menuBtn"
      class="md:hidden rounded px-2 py-1 ring-1 ring-white/20 hover:ring-white/40"
      aria-controls="mobileNav"
      aria-expanded="false"
    >
      <span class="sr-only">Open menu</span>
      <svg viewBox="0 0 24 24" class="w-6 h-6"
        ><path
          d="M4 7h16M4 12h16M4 17h16"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"></path></svg
      >
    </button>

    <!-- Nav desktop -->
    <nav
      class="hidden md:flex items-center gap-8 py-3 opacity-90"
      aria-label="Primary"
    >
      <a class="navlink" href=`${import.meta.env.BASE_URL}/`>Home</a>
      <a class="navlink" href=`${import.meta.env.BASE_URL}/#experience`
        >Experience</a
      >
      <a class="navlink" href=`${import.meta.env.BASE_URL}/#projects`
        >Projects</a
      >
      <a class="navlink" href=`${import.meta.env.BASE_URL}/#contact`>Contact</a>
    </nav>
  </div>

  <!-- Nav mobile -->
  <nav id="mobileNav" class="md:hidden hidden px-4 pb-3" aria-label="Primary">
    <div class="flex flex-col gap-3">
      <a class="navlink" href=`${import.meta.env.BASE_URL}/`>Home</a>
      <a class="navlink" href=`${import.meta.env.BASE_URL}/#experience`
        >Experience</a
      >
      <a class="navlink" href=`${import.meta.env.BASE_URL}/#projects`
        >Projects</a
      >
      <a class="navlink" href=`${import.meta.env.BASE_URL}/#contact`>Contact</a>
    </div>
  </nav>
</header>

<style>
  .navlink {
    @apply hover:text-yellow-100 focus:outline-none focus-visible:ring-2 focus-visible:ring-yellow-400 rounded;
  }
  .navlink[aria-current="true"] {
    @apply text-yellow-100;
  }
</style>

<script>
  // Toggle mobile
  const btn = document.getElementById("menuBtn");
  const mobile = document.getElementById("mobileNav");
  btn?.addEventListener("click", () => {
    const open = mobile?.classList.toggle("hidden") === false;
    btn.setAttribute("aria-expanded", String(open));
  });

  // Activo por sección/hash o por path (Home)
  const links = Array.from(document.querySelectorAll("a.navlink"));

  const normalize = (p: string) => p.replace(/\/+$/, ""); // quita barras finales
  const samePath = (a: string, b: string) => normalize(a) === normalize(b);

  function applyActive() {
    const curHash = window.location.hash || "";
    const curPath = window.location.pathname;

    links.forEach((a) => {
      // Usamos la URL resuelta del anchor (maneja BASE_URL y relativos)
      //@ts-ignore
      const u = new URL(a.href, window.location.href);

      let active = false;
      if (u.hash) {
        // Enlaces a secciones: compara solo el hash
        active = u.hash === curHash;
      } else {
        // Home: no tiene hash; activa si el path del link == path actual y no hay hash
        active = samePath(u.pathname, curPath) && curHash === "";
      }

      a.setAttribute("aria-current", active ? "true" : "false");
    });
  }

  // Inicial + al cambiar hash + al hacer scroll (IO)
  applyActive();
  window.addEventListener("hashchange", applyActive);

  const sections = ["experience", "projects", "contact"]
    .map((id) => document.getElementById(id))
    .filter(Boolean);

  const io = new IntersectionObserver(
    (entries) => {
      // actívate por la sección visible
      const visible = entries.find((e) => e.isIntersecting);
      if (visible) {
        history.replaceState(null, "", "#" + visible.target.id);
        applyActive();
      }
    },
    { rootMargin: "-50% 0px -40% 0px", threshold: 0.01 }
  );
  //@ts-ignore
  sections.forEach((el) => io.observe(el));
</script>
